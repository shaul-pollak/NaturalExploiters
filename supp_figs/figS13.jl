using Plots, DifferentialEquations, PlotThemes
gr();
theme(:dao);
fntsm = Plots.font("Arial", pointsize=6);
fntlg = Plots.font("Arial", pointsize=8);
default(titlefont=fntlg, guidefont=fntlg, tickfont=fntsm, legendfont=fntsm);

function model!(du,u,p,t)
    chit,glcnac,d,e = u
    α,γ_d,γ_e,λ = p
    du[1] = -(α * d * chit)
    du[2] = α * d * chit - glcnac * (γ_d * d + γ_e * e)
    du[3] = d * (γ_d * glcnac - λ)
    du[4] = e * (γ_e * glcnac - λ)
end

function degeff(fctr,ei,efact,D)
    u0 = [1e3,0,ei/efact,ei];
    tspan = (0.0,1000.0);
    α = 2e-4;
    deg_eff = 1e-2;
    exp_eff = deg_eff * fctr;
    λ = 1e-2;
    p = [α,deg_eff,exp_eff,λ];
    prob = ODEProblem(model!,u0,tspan,p)
    sol = solve(prob);
    if D
        display(plot(sol,layout=(1,4),label="",lw=2,size=(600,100)))
    end
    return maximum(sol[3,:]), maximum(sol[4,:])
end

ei = 10;
efact=5;

degeff(1,ei,efact,true);
savefig("figS13_ratio_1.svg")
degeff(1.25,ei,efact,true);
savefig("figS13_ratio_1.25.svg")
degeff(1.5,ei,efact,true);
savefig("figS13_ratio_1.5.svg")
degeff(2,ei,efact,true);
savefig("figS13_ratio_2.svg")

eff = 2 .^ (0:.01:1);
#eff = range(1,2,step=.05);
deg = zeros(length(eff));
expl = zeros(length(eff));
for i in 1:length(eff)
    deg[i],expl[i] = degeff(eff[i],ei,efact,false);
end
plot(deg./deg[1],expl./(ei*2),label="",color="black",lw=2,size=(600,200))
scatter!(deg./deg[1],expl./(ei*2),markersize=6,label="",zcolor=eff)
savefig("figS13_effratio.svg")
